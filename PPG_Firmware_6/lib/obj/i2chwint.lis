 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: I2CHWINT.asm
 0000           ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
 0000           ;;  Generated by PSoC Designer 5.4.3191
 0000           ;;
 0000           ;;  DESCRIPTION: I2CHW Master Interrupt Service Routine
 0000           ;;  This is the interrupt service routine for the Single Master I2C function.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0062           PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
 0038           PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
 0006           PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
 0001           PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
 0010           CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
 0000           
 0068           ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
 0080           ADC0_CR_CMPST:        equ 80h    ;
 0040           ADC0_CR_LOREN:        equ 40h    ;
 0020           ADC0_CR_SHEN:         equ 20h    ;
 0008           ADC0_CR_CBSRC:        equ 08h    ;
 0004           ADC0_CR_ADCM:         equ 04h    ;
 0001           ADC0_CR_EN:	          equ 01h    ;
 0000           
 0069           ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
 0080           ADC1_CR_CMPST:        equ 80h    ;
 0040           ADC1_CR_LOREN:        equ 40h    ;
 0020           ADC1_CR_SHEN:         equ 20h    ;
 0008           ADC1_CR_CBSRC:        equ 08h    ;
 0004           ADC1_CR_ADCM:         equ 04h    ;
 0001           ADC1_CR_EN:	          equ 01h    ;
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 0
 0072           ACE00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACE00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 1
 0076           ACE01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACE01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 0
 0080           ASE10CR0:     equ 80h          ; Control register 0                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 1
 0084           ASE11CR0:     equ 84h          ; Control register 0                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0018           CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
 0003           CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 000F           AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 000F           AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 006B           CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
 0040           CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
 0030           CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
 0004           CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
 0003           CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0008           VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
 00E6           ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           SYSTEM_STACK_PAGE: equ 0   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0000           SYSTEM_LARGE_MEMORY_MODEL: equ 0   
 0001           SYSTEM_SMALL_MEMORY_MODEL: equ 1   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C21020.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0002           I2CHW_MUM_SEL: equ 2h
 0000           
 0001           I2CHW_SLAVE: equ 1
 0002           I2CHW_MSTR:  equ 2
 0004           I2CHW_MMS:   equ 4
 0000           
 0000           I2CHW_ADDR_REG_PRESENT:                     equ   0                  ;CY8C28X45 have 1 always while all other have 0
 0000           I2CHW_AUTO_ADDR_CHECK:                      equ   0                  ;CY8C28X45 may have this 0 or 1 while all other have 0
 0000           I2CHW_USED_I2C_BLOCK:                       equ   0                  ;CY8C28X45 have 0 for I2C Controller_0 and 1 for I2C Controller_1, other have 0
 0000           I2CHW_CY8C22x45:                            equ   0                  ; 1 if it is CY8C22x45 device, othervice 0
 0000           
 0000           ;--------------------------------------------------
 0000           ;   I2CHW API Constants
 0000           ;--------------------------------------------------
 0000           
 00DE           I2CHW_INT_REG:                             equ 0x0de
 0001           I2CHW_INT_MASK:                            equ 0x01
 0000           
 0000           ;-----------------
 0000           ; Misc. equates
 0000           ;-----------------
 0000           
 0000           ;I2CHW_RsrcStatus byte, Status Bit definitions
 0001           I2CHW_RD_NOERR:                             equ 0x1   ;read completed without errors
 0002           I2CHW_RD_OVERFLOW:                          equ 0x2   ;master read more bytes than were contained in read buffer
 0004           I2CHW_RD_COMPLETE:                          equ 0x4   ;last read transaction complete
 0008           I2CHW_READFLASH:                            equ 0x8   ;set- next read will use flash read buffer, clear- next read will use ram read buffer
 0010           I2CHW_WR_NOERR:                             equ 0x10  ;write completed without errors
 0020           I2CHW_WR_OVERFLOW:                          equ 0x20  ;received bytes exceeded write buffer length
 0040           I2CHW_WR_COMPLETE:                          equ 0x40  ;Master uses this definition, slave uses that below.
 0040           I2CHW_ISR_NEW_ADDR:                         equ 0x40  ;New addre received (can infer that previous transaction is complete)
 0080           I2CHW_ISR_ACTIVE:                           equ 0x80  ;ISR for I2C_slave is is active
 0000           
 0000           
 0004           fI2C_NAKnextWr:                             equ 0x04  ;flag to tell slave to nak next byte from master
 0000           
 0000           
 0000           ;=== I2C equates ===
 0000           
 0000           
 0000           
 00D7           I2CHW_SCR:                                  equ d7h    ; I2C Enable Master/Slave Block Operation
 0000           
 0080           I2CM_BUSERR:    equ 0x80
 0040           I2CM_LOSTARB:   equ 0x40
 0020           I2C_STOP_ST:    equ 0x20
 0010           I2C_ACKOUT:     equ 0x10
 0008           I2C_ADDRIN:     equ 0x08
 0004           I2C_TX:         equ 0x04 ;compliment is RX
 0002           I2C_LST_BIT:    equ 0x02
 0001           I2C_BYTE_COMPL: equ 0x01
 0000           
 00D6           I2CHW_CFG:                                  equ d6h    ; I2C Configuration RegisterI2C
 0000           
 0020           I2C_BUSERRIE:   equ 0x20
 0010           I2C_STOPIE:     equ 0x10
 0008           I2C_CLKR1:      equ 0x08
 0004           I2C_CLKR0:      equ 0x04
 0002           I2C_M_EN:       equ 0x02
 0001           I2C_S_EN:       equ 0x01
 0000           
 00D9           I2CHW_MSCR:                                 equ d9h    ; I2C Master Status and Control
 0000           
 0008           I2CM_BUSBUSY:   equ 0x08
 0004           I2CM_MASTEROP:  equ 0x04
 0002           I2CM_RESTRT:    equ 0x02
 0001           I2CM_SNDSTRT:   equ 0x01
 0000           
 00D8           I2CHW_DR:                                   equ d8h    ; I2C Status and Control Register
 0000           
                IF(I2CHW_ADDR_REG_PRESENT) ;Applicable for CY8C28X45
                I2CHW_ADDR:                                 equ @ADDR_ADDRh    ; I2C HW Slave Address register
                ENDIF
                
                IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                I2CHW_SLAVE_ADDR:                           equ @Slave_Addrh   ; Permanent Slave Address
                ENDIF
                IF (I2CHW_CY8C22x45)
                I2CHW_ADDR:                                 equ ADh              ; I2C HW Slave Address register
                I2CHW_HW_ADDR_EN:                           equ 80h              ; HwAddrEn bitfield
                ENDIF
                
 0001           I2CHW_RW:                                   equ 01h  ; This bit will be SET only if there is an ongoing I2C traffic on bus 
 0000           
 0000           
 0000           
 0000           ;Equates used as conditional compile keys
 0000           
 0000           
 0000           I2CHW_READ_BUFTYPE:                         equ 0x0
 0000           
 0000           I2CHW_READ_FLASH:                           equ I2CHW_READ_BUFTYPE & 0x01
 0000           
 0000           I2CHW_24MHZ_FIX:                            equ 0x0
 0000           
 0000           I2CHW_THROTTLE_CLK_RATE:                    equ I2CHW_24MHZ_FIX & 0x01
 0000           
 0000           I2CHW_POLLING_ENABLE:                       equ 0x0
 0000           
 0000           I2CHW_POLLED_PROCESS:                       equ I2CHW_POLLING_ENABLE & 0x01
 0000           
 0000           ;I2C_(status and control) reg write macro
 0000           ;----------------------------------------------------
 0000           ;  I2C_SCR and I2C_MSCR reg write macro
 0000           ;
 0000           ;  Use the following macros to write to the I2C_SCR register
 0000           ;  Usage:    SetI2C_MSCR WRITE_VALUE
 0000           ;            SetI2C_SCR  WRITE_VALUE
 0000           ;            SetI2C_CFG  WRITE_VALUE
 0000           ;
 0000           ;  where WRITE_VALUE is the data to be writen
 0000           ;
 0000           ;----------------------------------------------------
 0000           ; Write to the  I2CHW_SCR register
 0000           ;
 0000               macro SetI2CHW_SCR
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  X
 0000                   mov   X, A                        ; if data for I2C_SCR was in A save it in X
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x1
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if the operation uses data in A get it out of X
 0000                   mov   reg[I2CHW_SCR], @0    ; write data to reg[I2C_SCR]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if A was data restore it from X now
 0000                   pop   X                           ; restore original accumulator
 0000           ELSE
 0000                   mov   reg[I2CHW_SCR], @0 ; write data to reg[I2C_SCR]
 0000           ENDIF
 0000               macro SetI2CHW_MSCR
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  X
 0000                   mov   X, A                        ; if data for I2C_SCR was in A save it in X
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x01
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if the operation uses data in A get it out of X
 0000                   mov   reg[I2CHW_MSCR], @0   ; write data to reg[I2C_MSCR]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if A was data restore it from X now
 0000                   pop   X                           ; restore original accumulator
 0000           ELSE
 0000                   mov  reg[I2CHW_MSCR], @0   ; write data to reg[I2C_MSCR]
 0000           ENDIF
 0000               macro BitSetI2CHW_CFG
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  A
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x02
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 12Mhz
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           ELSE
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                           ENDIF
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   pop   A                           ; restore original accumulator
 0000           ELSE
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    F, FLAG_XIO_MASK            ; set bank1
 0000                   or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                           ELSE
 0000                           or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           ENDIF
 0000           ENDIF
 0000               macro BitClrI2CHW_CFG
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK                    ; set bank1
 0000                   push  A
 0000                   mov   A, reg[OSC_CR0]                     ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x02
 0000                   mov   reg[OSC_CR0], A                     ; throttle the clock down to 12Mhz
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           ELSE
 0000                   and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                   and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                   or    F, FLAG_XIO_MASK                    ; set bank1
 0000                           ENDIF
 0000                   pop   A                                   ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                   pop   A                                   ; restore original accumulator
 0000           ELSE
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    F, FLAG_XIO_MASK                    ; set bank1
 0000                   and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                           ELSE
 0000                           and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           ENDIF
 0000           ENDIF
 0000               macro I2CHW_SERVICE_RETURN
 0000           
 0000           IF I2CHW_POLLED_PROCESS
 0000                   ret                                       ; NOT and ISR so use only a ret to return from poll
 0000           ELSE    
 0000                   reti                                      ; use reti to return from ISR
 0000           ENDIF
 0000               macro I2CHW_POLL_SERVICE
 0000           
 0000           IF I2CHW_POLLED_PROCESS
 0000                   lcall  I2CHW_Poll              ; Call this function repeatedly if we are in a loop
 0000                                                                     ; waiting for bStatus BUS_BUSY to clear.  Otherwise
 0000                                                                                                             ; this is a deadlock condtion
 0000           ENDIF
 0001           I2CHW_READ:           equ  0x01 ; Set the R/W flag after the slave address.
 0000           I2CHW_WRITE:          equ  0x00 ; Clear the R/W flag after the slave address.
 0000           I2CHW_XFER_ERROR:     equ  0x00 ; Slave did not ACK
 0000           
 0000           I2CHW_CompleteXfer:   equ  0x00 ; Perform a complete I2C transfer
 0001           I2CHW_RepStart:       equ  0x01 ; Perform a complete transfer with a Repeat Start
 0002           I2CHW_NoStop:         equ  0x02 ; Perform a complete transfer, but leave off the stop.
 0000           
 0000           I2CHW_NAKslave:       equ  0x00 ; NAK the slave after a read
 0001           I2CHW_ACKslave:       equ  0x01 ; ACK the slave after a read
 0000           
 0000           ; end of file I2CHW.inc
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global Symbols
 0000           ;-----------------------------------------------
 0000           
                export     I2CHW_Read_Count
                export    _I2CHW_Read_Count
                export     I2CHW_Write_Count
                export    _I2CHW_Write_Count
                
                export    pI2CHW_Read_BufLO
                export   _pI2CHW_Read_BufLO
                export    pI2CHW_Write_BufLO
                export   _pI2CHW_Write_BufLO
                export    I2CHW_RsrcStatus
                export   _I2CHW_RsrcStatus
                export    I2CHW_SlaveAddr
                export   _I2CHW_SlaveAddr
                
                ;-----------------------------------------------
                ; WARNING: The variables below are deprecated
                ; and have been replaced with Read_BufLO
                ; and Write_BufLO
                ;-----------------------------------------------
                export    pI2CHW_Read_Buf
                export   _pI2CHW_Read_Buf
                export    pI2CHW_Write_Buf
                export   _pI2CHW_Write_Buf
                ;-----------------------------------------------
                ; END WARNING
                ;-----------------------------------------------
                 
                area InterruptRAM(RAM, REL, CON)
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                
 0000             I2CHW_SlaveAddr:
 0000            _I2CHW_SlaveAddr:                           blk      1
 0001             I2CHW_RsrcStatus:
 0001            _I2CHW_RsrcStatus:                          blk     1
 0002             I2CHW_Write_Count:
 0002            _I2CHW_Write_Count:                         blk    1
                IF SYSTEM_LARGE_MEMORY_MODEL
                export    pI2CHW_Write_BufHI
                export   _pI2CHW_Write_BufHI
                
                 pI2CHW_Write_BufHI:
                _pI2CHW_Write_BufHI:                         blk     1
                ENDIF
                ;-----------------------------------------------
                ; WARNING: The variable below is deprecated
                ; and has been replaced Write_BufLO
                ;-----------------------------------------------
 0003            pI2CHW_Write_Buf:
 0003           _pI2CHW_Write_Buf:
 0003           ;-----------------------------------------------
 0003           ; END WARNING
 0003           ;-----------------------------------------------
 0003            pI2CHW_Write_BufLO:
 0003           _pI2CHW_Write_BufLO:                         blk      1
 0004           
                IF I2CHW_READ_FLASH
                export    pI2CHW_Read_BufHI
                export   _pI2CHW_Read_BufHI
                
                 pI2CHW_Read_BufHI:
                _pI2CHW_Read_BufHI:                          blk     1
                ELSE
                IF SYSTEM_LARGE_MEMORY_MODEL
                export    pI2CHW_Read_BufHI
                export   _pI2CHW_Read_BufHI
                
                 pI2CHW_Read_BufHI:
                _pI2CHW_Read_BufHI:                          blk     1
                ENDIF
                ENDIF
                
                ;-----------------------------------------------
                ; WARNING: The variable below is deprecated
                ; and has been replaced Read_BufLO
                ;-----------------------------------------------
 0004            pI2CHW_Read_Buf:
 0004           _pI2CHW_Read_Buf:
 0004           ;-----------------------------------------------
 0004           ; END WARNING
 0004           ;-----------------------------------------------
 0004            pI2CHW_Read_BufLO:
 0004           _pI2CHW_Read_BufLO:                          blk       1
 0005           
                IF I2CHW_READ_FLASH
                export    I2CHW_Read_CountHI
                export   _I2CHW_Read_CountHI
                
                 I2CHW_Read_CountHI:
                _I2CHW_Read_CountHI:                         blk    1
                ENDIF
                
 0005            I2CHW_Read_Count:
 0005           _I2CHW_Read_Count:                           blk      1
 0006           
 0006           ;@PSoC_UserCode_INIT@ (Do not change this line.)
 0006           ;---------------------------------------------------
 0006           ; Insert your custom declarations below this banner
 0006           ;---------------------------------------------------
 0006           
 0006           ;------------------------
 0006           ; Includes
 0006           ;------------------------
 0006           
 0006                   
 0006           ;------------------------
 0006           ;  Constant Definitions
 0006           ;------------------------
 0006           
 0006           
 0006           ;------------------------
 0006           ; Variable Allocation
 0006           ;------------------------
 0006           
 0006           
 0006           ;---------------------------------------------------
 0006           ; Insert your custom declarations above this banner
 0006           ;---------------------------------------------------
 0006           ;@PSoC_UserCode_END@ (Do not change this line.)
 0006           
 0006           
 0006           
                AREA UserModules (ROM, REL)
                
                
                export _I2CHW_ISR
                ;;****************************************************
                ;; I2C_MASTER  main entry point from vector 60h
                ;;
                ;;****************************************************
                
                
 0000           _I2CHW_ISR:
 0000 08            push A
 0001 10            push X
                IF SYSTEM_LARGE_MEMORY_MODEL
                   mov   A, reg[ IDX_PP ]
                   push  A
                ENDIF
                    
                    ; Stop trap is not recommended because the stop bit cannot be cleared
                    ; User may choose to enable it
                    ; Add code to handle stop condition here
                
 0002 49D708        tst reg[I2CHW_SCR], I2C_ADDRIN
 0005 A015          jz DataState
 0007               ;test for a start condition sent out, or bus error, ack from slave, or (lost arb & addr)
 0007           AddrState:
 0007 49D901        tst reg[I2CHW_MSCR], I2CM_SNDSTRT
 000A B026          jnz NoStart
 000C 49D702        tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
 000F B018          jnz SlaveAddrNAK
 0011                                                                      ;slave must have acked here
 0011                                                                      
 0011 470001        tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read (from slave and put it in RAM,
 0014                                                                      ;bit 0 = 0 then write to slave and get it from RAM or Flash
 0014 B022          jnz I2C_ReadSlave1stByte                               ;bit 0 was 1
 0016 8080          jmp I2C_WriteSlave1stByte                              ;bit 0 was 0
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0018 20            pop X
 0019 18            pop A
 001A 7E            reti
 001B           
 001B           DataState:
 001B 2E0180        or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
 001E 470001        tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read, bit 0 = 0 then write
 0021 B021          jnz I2C_ReadSlave                                      ;bit 0 was 1
 0023           
 0023           StillDataToWrite:
 0023 8079          jmp I2C_WriteSlave                                     ;bit 0 was 0
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0025 20            pop X
 0026 18            pop A
 0027 7E            reti
 0028           
 0028           
 0028           SlaveAddrNAK:
 0028               ;;
 0028               ;; all there is to do here is to return, the slave didn't respond so it's not there or needs
 0028               ;; to be tried later.
 0028               ;;
 0028           ;@PSoC_UserCode_BODY4@ (Do not change this line.)
 0028           ;---------------------------------------------------
 0028           ; Insert your custom code below this banner
 0028           ; to modify the way a NAK from a slave is handled
 0028           ; possibly set a user defined status
 0028           ;---------------------------------------------------
 0028           
 0028           ;********************************************************
 0028           ; End user I2C Buffered WRITE (to RAM) Customization
 0028           ;********************************************************
 0028           ;@PSoC_UserCode_END@ (Do not change this line.)
 0028           ;
 0028           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 0028           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0028 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
 002B 26017F        and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
 002E           
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 002E 20            pop X
 002F 18            pop A
 0030 7E            reti
 0031           
 0031           NoStart:
 0031               ;here might test loss of arbitration and the presence of an address bit indicating that the
 0031               ;Master is being addressed as a slave.
 0031               ;;
 0031               ;; there may be a need to indicate that there was a Master transmission
 0031               ;; failure or an unsuccessful attempt.
 0031               ;;
 0031 26017F        and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0034 20            pop X
 0035 18            pop A
 0036 7E            reti
 0037           
 0037           I2C_ReadSlave1stByte:
 0037 2E0180        or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
 003A 2601FB        and [I2CHW_RsrcStatus], ~I2CHW_RD_COMPLETE
 003D           
 003D           ;read normal data in from slave immediately after the address is sent, there is no data to read
 003D           ;but the bus is stalled at byte complete
 003D           
 003D           ;
 003D           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 003D           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 003D 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0040 20            pop X
 0041 18            pop A
 0042 7E            reti
 0043           
 0043           I2C_ReadSlave:                                             ;this is just a normal read
 0043           
 0043           
 0043           ;;code snipped from old SW I2C below
 0043           ;
 0043           ; MASTER READ from SLAVE
 0043           ; (and writing to it's own RAM--Write_Buf and Write_Cnt)
 0043           ;
 0043           ;@PSoC_UserCode_BODY1_V1.2@ (Do not change this line.)
 0043           ;---------------------------------------------------
 0043           ; Insert your custom code below this banner
 0043           ;---------------------------------------------------
 0043           
 0043           ;********************************************************
 0043           ; By modifying the section from here down to the next comment block
 0043           ; a user could process data for a custom I2C Master Read (write to RAM) application
 0043           ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
 0043           ;********************************************************
 0043 470004       tst   [I2CHW_bStatus], fI2C_NAKnextWr
 0046 B014         jnz   InStoreData
 0048              ;
 0048              ;process write data here
 0048              ;
 0048 7A02         dec   [I2CHW_Write_Count]
 004A C03D         jc    CompleteRDXfer                                              ; carry set if value became -1
 004C              ;jz    InStoreData                                                                                             ;In theory overflow cant happen but stop the transaction anyway.
 004C 3C0200       cmp   [I2CHW_Write_Count], 00                                     ;set nak flag, dec count, and store data
 004F A003         jz    InNakNextByte
 0051 8006         jmp   InNotBufEnd
 0053           InNakNextByte:                                                       ;set the nakflag in I2CHW_bStatus
 0053 2E0004       or    [I2CHW_bStatus], fI2C_NAKnextWr
 0056 8004         jmp   InStoreData
 0058           InNotBufEnd:
 0058 2600FB       and   [I2CHW_bStatus], ~fI2C_NAKnextWr                            ;clear the nak flag in case it was set from a previous operation
 005B           InStoreData:
 005B              ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
 005B 2E0110       or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR                          ;set current status
                IF SYSTEM_LARGE_MEMORY_MODEL
                   mov   A, [pI2CHW_Write_BufHI]
                ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
 005E 5803         mov   X, [pI2CHW_Write_BufLO]
 0060 5DD8         mov   A, reg[I2CHW_DR]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
 0062 5400         mov   [X], A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_00b
                   ENDIF
 0064 7603         inc   [pI2CHW_Write_BufLO]
 0066           
 0066 470004       tst   [I2CHW_bStatus], fI2C_NAKnextWr
 0069 B007         jnz   NAK_this_one
 006B           
 006B           ;********************************************************
 006B           ; End user I2C Buffered WRITE (to RAM) Customization
 006B           ;********************************************************
 006B           ;@PSoC_UserCode_END@ (Do not change this line.)
 006B           ;;code snipped form SW I2C to maintain api compatibility above
 006B           
 006B           ;
 006B           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 006B           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], I2C_ACKOUT    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 006B 62D710            mov   reg[I2CHW_SCR], I2C_ACKOUT ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 006E 20            pop X
 006F 18            pop A
 0070 7E            reti
 0071           
 0071           NAK_this_one:
 0071           
 0071 2600FB        and  [I2CHW_bStatus], ~fI2C_NAKnextWr
 0074           
 0074               ; *****
 0074               ; here we may need to look at the mode that this was called under
 0074               ; what does the user want done on the last byte.  Could be a send restart...
 0074               ; ******
 0074 2601F8        and   [I2CHW_RsrcStatus], ~0x07                                  ;clear the read status bits
 0077 2E0101        or    [I2CHW_RsrcStatus], I2CHW_RD_NOERR
 007A 2E0104        or    [I2CHW_RsrcStatus], I2CHW_RD_COMPLETE
 007D           
 007D 260003        and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
 0080 A007          jz      CompleteRDXfer
 0082 26017F        and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0085 20            pop X
 0086 18            pop A
 0087 7E            reti
 0088               ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
 0088               ;The NAK (not I2C_SNDACK) bit in I2C_SCR below will automatically generate a stop
 0088           
 0088           CompleteRDXfer:
 0088           
 0088           ;
 0088           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 0088           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0088 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
                
 008B 26017F        and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 008E 20            pop X
 008F 18            pop A
 0090 7E            reti                                                             ;return and wait for the next interrupt (on data)
 0091           
 0091           AckTheRead:
 0091           
 0091           ;
 0091           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 0091           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], I2C_ACKOUT    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0091 62D710            mov   reg[I2CHW_SCR], I2C_ACKOUT ; write data to reg[I2C_SCR]
                ENDIF
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0094 20            pop X
 0095 18            pop A
 0096 7E            reti
 0097           
 0097           
 0097           I2C_WriteSlave1stByte:
 0097           ;write normal data to slave
 0097 2601BF        and [I2CHW_RsrcStatus], ~I2CHW_WR_COMPLETE
 009A 2E0180        or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
 009D           
 009D           
 009D           I2C_WriteSlave:
 009D           
 009D 49D702        tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
 00A0 B037          jnz SlaveDataNAK
 00A2 5004          mov A, (I2C_TX)
 00A4 08            push A
 00A5           
 00A5           ;
 00A5           ;MASTER is WRITING TO SLAVE (& reading data from ram or flash buffer)
 00A5           ;
 00A5           ;;code snipped from SW I2C below
 00A5           
 00A5           I2C_ObtainOutData:
 00A5           
 00A5           
 00A5           ;********************************************************
 00A5           ; here we need to get the next data to output (master-read)
 00A5           ; also set the status byte for use on exit
 00A5           ;********************************************************
                IF I2CHW_READ_FLASH
                ;@PSoC_UserCode_BODY2_V1.2@ (Do not change this line.)
                ;---------------------------------------------------
                ; Insert your custom code below this banner
                ; to modify the way a master might read non-volitile data
                ; to send.
                ;---------------------------------------------------
                
                    tst  [I2CHW_RsrcStatus],I2CHW_READFLASH
                    jz   ReadOutData
                
                    ;
                    ;get the data
                    ;
                    mov  X, [pI2CHW_Read_BufLO]
                    mov  A, [pI2CHW_Read_BufHI]
                    romx
                    mov  reg[I2CHW_DR],A
                    dec  [I2CHW_Read_Count]                                          ;calc addr lsb
                    jnc  NoDecHighCount
                    dec  [I2CHW_Read_CountHI]
                
                    jc   MstrWRComplete
                
                NoDecHighCount:
                
                    inc  [pI2CHW_Read_BufLO]                                         ;set the next flash address to read
                    jnc  NoIncHiAddr
                    inc  [pI2CHW_Read_BufHI]
                NoIncHiAddr:
                   jmp   I2CNormalOutput
                ;
                ;****** THERE SHOULD BE NO WAY TO REACH THIS STATE WE'LL JUST TERMINATE THE ACTIVITY SINCE WERE THE MASTER
                ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                ;
                ;FlashRdOverflow:
                    ;deal with the over flow cond by resending last data byte (dec the low addr)
                
                ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                ;                                                                      ;set count back to 0
                ;   mov   [I2CHW_Read_CountHI], 0                                    ;functionally the same as incrementing ffff and less instructions
                ;   mov   [I2CHW_Read_Count], 0
                ;   jmp   I2CNormalRead
                
                ;---------------------------------------------------
                ; Insert your custom code above this banner
                ;---------------------------------------------------
                ;@PSoC_UserCode_END@ (Do not change this line.)
                
                ENDIF
                ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                ;---------------------------------------------------
                ; Insert your custom code below this banner
                ; to modify the way a master might read RAM data to send
                ; to an I2C device
                ; By replacing the section from here down to the next block
                ; a user could process data for a custom I2C READ application
                ;---------------------------------------------------
 00A5           ReadOutData:
 00A5              ;read the current data byte
                IF SYSTEM_LARGE_MEMORY_MODEL
                   mov   A, [pI2CHW_Read_BufHI]
                ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
 00A5 5804         mov   X, [pI2CHW_Read_BufLO]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
 00A7 5200         mov   A, [X]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_00b
                   ENDIF
 00A9 60D8         mov   reg[I2CHW_DR], A
 00AB 7A05         dec   [I2CHW_Read_Count]
 00AD           
 00AD C00B         jc    MstrWRComplete
 00AF 7604         inc   [pI2CHW_Read_BufLO]
 00B1 8001         jmp   I2CNormalOutput
 00B3           ;
 00B3           ;ram read overflow detected here, just resend the last location in the buffer
 00B3           ;
 00B3           ;********        THERE SHOULD BE NO WAY TO OVERFLOW FOR THIS CASE
 00B3           ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
 00B3           ;
 00B3           ;RamRDOverflow:
 00B3           ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
 00B3           ;   inc   [I2CHW_Read_Count]                                         ; set back to zero
 00B3           
 00B3           ;---------------------------------------------------
 00B3           ; End user I2C MASTER WRITE TO SLAVE /READ buffer customization section
 00B3           ; Insert your custom code above this banner
 00B3           ;---------------------------------------------------
 00B3           ;@PSoC_UserCode_END@ (Do not change this line.)
 00B3           ;;code snipped form SW I2C to maintain api compatibility above
 00B3           I2CNormalOutput:
 00B3           
 00B3               ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
 00B3               ;and place there based on whether or not the previous transmission was our I2C address.
 00B3 18            pop   A
 00B4           
 00B4           ;
 00B4           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 00B4           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], A    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00B4 60D7              mov   reg[I2CHW_SCR], A ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 00B6 20            pop X
 00B7 18            pop A
 00B8 7E            reti ;return and wait for the next interrupt (on data)
 00B9           
 00B9           MstrWRComplete:
 00B9 26018F        and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
 00BC 2E0140        or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
 00BF 2E0110        or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR
 00C2           
 00C2               ; *****
 00C2               ; here we may need to look at the mode that this was called under
 00C2               ; what does the user want done on the last byte.  Could be a send restart...
 00C2               ; ******
 00C2 260003        and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
 00C5 A008          jz      CompleteWRXfer
 00C7 18            pop  A                                                           ;clear the stack for return
 00C8 26017F        and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
 00CB           
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 00CB 20            pop X
 00CC 18            pop A
 00CD 7E            reti
 00CE               ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
 00CE               ; The release of the I2C_TX bit in I2C_SCR below will automatically generate a stop
 00CE           
 00CE           CompleteWRXfer:
 00CE           
 00CE 18            pop   A
 00CF           
 00CF           ;
 00CF           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 00CF           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00CF 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
 00D2 26017F       and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 00D5 20           pop X
 00D6 18           pop A
 00D7 7E           reti
 00D8           
 00D8           SlaveDataNAK:
 00D8           ;must also fix up the data buffer.  While it is marginally safe to nak a byte as a slave and 
 00D8           ;store it.  It is NEVER safe as a master to notice that a written byte has been nak'ed by a 
 00D8           ;slave and fail to resend it.
 00D8           ;this piece of code fixes up the count and buffer that the master is using to get data from
 00D8           ;to re-transmit the byte when the next master write is done.
 00D8 7605          inc  [I2CHW_Read_Count]                          ;calc addr lsb
                IF I2CHW_READ_FLASH
                    jnc  NoIncHighCount
                    inc  [I2CHW_Read_CountHI]
                
                NoIncHighCount:
                ENDIF
 00DA 7A04          dec  [pI2CHW_Read_BufLO]                         ;set the next flash address to read
                IF SYSTEM_LARGE_MEMORY_MODEL
                    jnc  NoDecHiAddr
                    dec  [pI2CHW_Read_BufHI]
                NoDecHiAddr:
                ELSE
                IF I2CHW_READ_FLASH
                    jnc  NoDecHiCAddr
                    dec  [pI2CHW_Read_BufHI]
                NoDecHiCAddr:
                ENDIF
                ENDIF
                
                ;;
                ;; all there is to do here is to return & set status, the slave didn't want any more data
                ;;
                ; no pop needed because the nak is detected before the push happens above
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00DC 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
 00DF 26017F        and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
 00E2 26018F        and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
 00E5 2E0140        or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
 00E8 2E0120        or    [I2CHW_RsrcStatus], I2CHW_WR_OVERFLOW
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 00EB 20            pop X
 00EC 18            pop A
 00ED 7E           reti
 00EE           
 00EE           STOPTRAP:
 00EE               ;
 00EE               ;   If interrupt on STOP condition is enabled:
 00EE               ;   Add user code to process stop (not recommended becuase I2C bus is NOT stalled and ISR
 00EE               ;   may block reception of ongoing transactions/addresses
 00EE               ;   STOP condition is never detected when a repeat start is used by the master.
 00EE               ;
 00EE 26017F        and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 00F1 20            pop X
 00F2 18            pop A
 00F3 7E            reti
 00F4           
 00F4           ; end of file I2CHWINT.asm
